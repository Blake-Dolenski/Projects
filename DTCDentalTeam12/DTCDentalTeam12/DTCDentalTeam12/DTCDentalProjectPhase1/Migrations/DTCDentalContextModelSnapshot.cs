// <auto-generated />
using System;
using DTCDentalProjectPhase1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DTCDentalProjectPhase1.Migrations
{
    [DbContext(typeof(DTCDentalContext))]
    partial class DTCDentalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"), 1L, 1);

                    b.Property<DateTime?>("AppointmentDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("DentistID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DentistID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TypeID");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentID = 1,
                            AppointmentDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 1,
                            PatientID = 1,
                            StartTime = new DateTime(2024, 11, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 1
                        },
                        new
                        {
                            AppointmentID = 2,
                            AppointmentDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 2,
                            PatientID = 2,
                            StartTime = new DateTime(2024, 11, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 1
                        },
                        new
                        {
                            AppointmentID = 3,
                            AppointmentDate = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 1,
                            PatientID = 3,
                            StartTime = new DateTime(2024, 11, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 16
                        },
                        new
                        {
                            AppointmentID = 4,
                            AppointmentDate = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 2,
                            PatientID = 4,
                            StartTime = new DateTime(2024, 11, 16, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 17
                        },
                        new
                        {
                            AppointmentID = 5,
                            AppointmentDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 1,
                            PatientID = 7,
                            StartTime = new DateTime(2024, 11, 17, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 7
                        },
                        new
                        {
                            AppointmentID = 6,
                            AppointmentDate = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 2,
                            PatientID = 10,
                            StartTime = new DateTime(2024, 11, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 11
                        },
                        new
                        {
                            AppointmentID = 7,
                            AppointmentDate = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 1,
                            PatientID = 12,
                            StartTime = new DateTime(2024, 11, 18, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 18
                        },
                        new
                        {
                            AppointmentID = 8,
                            AppointmentDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 2,
                            PatientID = 5,
                            StartTime = new DateTime(2024, 11, 19, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 13
                        },
                        new
                        {
                            AppointmentID = 9,
                            AppointmentDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 1,
                            PatientID = 14,
                            StartTime = new DateTime(2024, 11, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 5
                        },
                        new
                        {
                            AppointmentID = 10,
                            AppointmentDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DentistID = 2,
                            PatientID = 8,
                            StartTime = new DateTime(2024, 11, 20, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeID = 19
                        });
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.AppointmentType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"), 1L, 1);

                    b.Property<string>("AppointmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("TypeID");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            TypeID = 1,
                            AppointmentName = "Cosmetic Consultation - Adult",
                            Description = "Initial consultation with adult patient to discuss cosmetic dentistry options.",
                            Duration = 30
                        },
                        new
                        {
                            TypeID = 2,
                            AppointmentName = "Cosmetic Consultation - Child",
                            Description = "Initial consultation with child patient to discuss cosmetic dentistry options.",
                            Duration = 30
                        },
                        new
                        {
                            TypeID = 3,
                            AppointmentName = "Cosmetic Consultation - Teen",
                            Description = "Initial consultation with teen patient to discuss cosmetic dentistry options.",
                            Duration = 30
                        },
                        new
                        {
                            TypeID = 4,
                            AppointmentName = "Cosmetic Procedure - Adult",
                            Description = "Cosmetic dentistry procedure for adult patient.",
                            Duration = 120
                        },
                        new
                        {
                            TypeID = 5,
                            AppointmentName = "Cosmetic Procedure - Child",
                            Description = "Cosmetic dentistry procedure for child patient.",
                            Duration = 120
                        },
                        new
                        {
                            TypeID = 6,
                            AppointmentName = "Cosmetic Procedure - Teen",
                            Description = "Cosmetic dentistry procedure for teen patient.",
                            Duration = 120
                        },
                        new
                        {
                            TypeID = 7,
                            AppointmentName = "Endodontic Procedure - Adult",
                            Description = "Painless root canal therapy for adults.",
                            Duration = 90
                        },
                        new
                        {
                            TypeID = 8,
                            AppointmentName = "Endodontic Procedure - Child",
                            Description = "Painless root canal therapy for children.",
                            Duration = 90
                        },
                        new
                        {
                            TypeID = 9,
                            AppointmentName = "Endodontic Procedure - Teen",
                            Description = "Painless root canal therapy for teens.",
                            Duration = 90
                        },
                        new
                        {
                            TypeID = 10,
                            AppointmentName = "New Patient - Adult",
                            Description = "Meet new patient, general dental check-up including x-rays and teeth cleaning.",
                            Duration = 30
                        },
                        new
                        {
                            TypeID = 11,
                            AppointmentName = "New Patient - Child",
                            Description = "Meet new patient, general dental check-up including x-rays and teeth cleaning.",
                            Duration = 30
                        },
                        new
                        {
                            TypeID = 12,
                            AppointmentName = "New Patient - Teen",
                            Description = "Meet new patient, general dental check-up including x-rays and teeth cleaning.",
                            Duration = 30
                        },
                        new
                        {
                            TypeID = 13,
                            AppointmentName = "Periodontal Treatment - Adult",
                            Description = "Treatment (both preventative or restorative) for gum diseases.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 14,
                            AppointmentName = "Periodontal Treatment - Child",
                            Description = "Treatment (both preventative or restorative) for gum diseases.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 15,
                            AppointmentName = "Periodontal Treatment - Teen",
                            Description = "Treatment (both preventative or restorative) for gum diseases.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 16,
                            AppointmentName = "Preventative Care - Adult",
                            Description = "General preventative care for an adult patient. The appointment will include x-rays, teeth cleaning, and general oral hygiene advising.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 17,
                            AppointmentName = "Preventative Care - Child",
                            Description = "General preventative care for a child patient. The appointment will include x-rays, teeth cleaning, and general oral hygiene advising.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 18,
                            AppointmentName = "Preventative Care - Teen",
                            Description = "General preventative care for a teen patient. The appointment will include x-rays, teeth cleaning, and general oral hygiene advising.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 19,
                            AppointmentName = "Prosthodontic Care - Adult",
                            Description = "Restoration and/or replacement of missing or damaged teeth for adults.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 20,
                            AppointmentName = "Prosthodontic Care - Child",
                            Description = "Restoration and/or replacement of missing or damaged teeth for children.",
                            Duration = 60
                        },
                        new
                        {
                            TypeID = 21,
                            AppointmentName = "Prosthodontic Care - Teen",
                            Description = "Restoration and/or replacement of missing or damaged teeth for teens.",
                            Duration = 60
                        });
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.CompletedService", b =>
                {
                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("VisitID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompletedServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompletedServiceID"), 1L, 1);

                    b.HasKey("ServiceID", "VisitID");

                    b.HasIndex("VisitID");

                    b.ToTable("CompletedServices");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            VisitID = 1,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 2,
                            VisitID = 1,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 1,
                            VisitID = 2,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 3,
                            VisitID = 3,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 2,
                            VisitID = 4,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 1,
                            VisitID = 5,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 3,
                            VisitID = 6,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 2,
                            VisitID = 7,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 1,
                            VisitID = 8,
                            CompletedServiceID = 0
                        },
                        new
                        {
                            ServiceID = 3,
                            VisitID = 9,
                            CompletedServiceID = 0
                        });
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Dentist", b =>
                {
                    b.Property<int>("DentistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DentistID"), 1L, 1);

                    b.Property<string>("DentistFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentistLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HireDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("DentistID");

                    b.ToTable("Dentists");

                    b.HasData(
                        new
                        {
                            DentistID = 1,
                            DentistFirstName = "John",
                            DentistLastName = "Smith",
                            HireDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DentistID = 2,
                            DentistFirstName = "Sarah",
                            DentistLastName = "Johnson",
                            HireDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DentistID = 3,
                            DentistFirstName = "Michael",
                            DentistLastName = "Chen",
                            HireDate = new DateTime(2020, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DentistID = 4,
                            DentistFirstName = "Emily",
                            DentistLastName = "Rodriguez",
                            HireDate = new DateTime(2021, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DentistID = 5,
                            DentistFirstName = "David",
                            DentistLastName = "Wilson",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"), 1L, 1);

                    b.Property<string>("PatientCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PatientDOB")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientHOHID")
                        .HasColumnType("int");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PatientMinor")
                        .HasColumnType("bit");

                    b.Property<string>("PatientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientSSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientStreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientZip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientID");

                    b.HasIndex("PatientHOHID");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientID = 1,
                            PatientCity = "Seattle",
                            PatientDOB = new DateTime(1980, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "michael.brown@gmail.com",
                            PatientFirstName = "Michael",
                            PatientHOHID = -1,
                            PatientLastName = "Brown",
                            PatientMinor = false,
                            PatientPhone = "206-555-0101",
                            PatientSSN = "123-45-6789",
                            PatientState = "WA",
                            PatientStreetAddress = "123 Main St",
                            PatientZip = "98101"
                        },
                        new
                        {
                            PatientID = 2,
                            PatientCity = "Seattle",
                            PatientDOB = new DateTime(2015, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "emma.brown@gmail.com",
                            PatientFirstName = "Emma",
                            PatientHOHID = 1,
                            PatientLastName = "Brown",
                            PatientMinor = true,
                            PatientPhone = "206-555-0102",
                            PatientSSN = "123-45-6790",
                            PatientState = "WA",
                            PatientStreetAddress = "123 Main St",
                            PatientZip = "98101"
                        },
                        new
                        {
                            PatientID = 3,
                            PatientCity = "Seattle",
                            PatientDOB = new DateTime(1975, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "robert.johnson@gmail.com",
                            PatientFirstName = "Robert",
                            PatientHOHID = -1,
                            PatientLastName = "Johnson",
                            PatientMinor = false,
                            PatientPhone = "206-555-0103",
                            PatientSSN = "123-45-6791",
                            PatientState = "WA",
                            PatientStreetAddress = "456 Pine St",
                            PatientZip = "98102"
                        },
                        new
                        {
                            PatientID = 4,
                            PatientCity = "Seattle",
                            PatientDOB = new DateTime(2010, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "lisa.johnson@gmail.com",
                            PatientFirstName = "Lisa",
                            PatientHOHID = 3,
                            PatientLastName = "Johnson",
                            PatientMinor = true,
                            PatientPhone = "206-555-0104",
                            PatientSSN = "123-45-6792",
                            PatientState = "WA",
                            PatientStreetAddress = "456 Pine St",
                            PatientZip = "98102"
                        },
                        new
                        {
                            PatientID = 5,
                            PatientCity = "Bellevue",
                            PatientDOB = new DateTime(1982, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "sarah.wilson@gmail.com",
                            PatientFirstName = "Sarah",
                            PatientHOHID = -1,
                            PatientLastName = "Wilson",
                            PatientMinor = false,
                            PatientPhone = "425-555-0105",
                            PatientSSN = "123-45-6793",
                            PatientState = "WA",
                            PatientStreetAddress = "789 Oak Dr",
                            PatientZip = "98004"
                        },
                        new
                        {
                            PatientID = 6,
                            PatientCity = "Bellevue",
                            PatientDOB = new DateTime(2013, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "james.wilson@gmail.com",
                            PatientFirstName = "James",
                            PatientHOHID = 5,
                            PatientLastName = "Wilson",
                            PatientMinor = true,
                            PatientPhone = "425-555-0106",
                            PatientSSN = "123-45-6794",
                            PatientState = "WA",
                            PatientStreetAddress = "789 Oak Dr",
                            PatientZip = "98004"
                        },
                        new
                        {
                            PatientID = 7,
                            PatientCity = "Kirkland",
                            PatientDOB = new DateTime(1990, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "david.martinez@gmail.com",
                            PatientFirstName = "David",
                            PatientHOHID = -1,
                            PatientLastName = "Martinez",
                            PatientMinor = false,
                            PatientPhone = "425-555-0107",
                            PatientSSN = "123-45-6795",
                            PatientState = "WA",
                            PatientStreetAddress = "321 Elm St",
                            PatientZip = "98033"
                        },
                        new
                        {
                            PatientID = 8,
                            PatientCity = "Redmond",
                            PatientDOB = new DateTime(1988, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "jennifer.taylor@gmail.com",
                            PatientFirstName = "Jennifer",
                            PatientLastName = "Taylor",
                            PatientMinor = false,
                            PatientPhone = "425-555-0108",
                            PatientSSN = "123-45-6796",
                            PatientState = "WA",
                            PatientStreetAddress = "567 Cedar Ln",
                            PatientZip = "98052"
                        },
                        new
                        {
                            PatientID = 9,
                            PatientCity = "Renton",
                            PatientDOB = new DateTime(1979, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "carlos.garcia@gmail.com",
                            PatientFirstName = "Carlos",
                            PatientHOHID = -1,
                            PatientLastName = "Garcia",
                            PatientMinor = false,
                            PatientPhone = "425-555-0109",
                            PatientSSN = "123-45-6797",
                            PatientState = "WA",
                            PatientStreetAddress = "890 Maple Ave",
                            PatientZip = "98055"
                        },
                        new
                        {
                            PatientID = 10,
                            PatientCity = "Renton",
                            PatientDOB = new DateTime(2008, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "maria.garcia@gmail.com",
                            PatientFirstName = "Maria",
                            PatientHOHID = 9,
                            PatientLastName = "Garcia",
                            PatientMinor = true,
                            PatientPhone = "425-555-0110",
                            PatientSSN = "123-45-6798",
                            PatientState = "WA",
                            PatientStreetAddress = "890 Maple Ave",
                            PatientZip = "98055"
                        },
                        new
                        {
                            PatientID = 11,
                            PatientCity = "Renton",
                            PatientDOB = new DateTime(2012, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "luis.garcia@gmail.com",
                            PatientFirstName = "Luis",
                            PatientHOHID = 9,
                            PatientLastName = "Garcia",
                            PatientMinor = true,
                            PatientPhone = "425-555-0111",
                            PatientSSN = "123-45-6799",
                            PatientState = "WA",
                            PatientStreetAddress = "890 Maple Ave",
                            PatientZip = "98055"
                        },
                        new
                        {
                            PatientID = 12,
                            PatientCity = "Issaquah",
                            PatientDOB = new DateTime(2007, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "emily.chen@gmail.com",
                            PatientFirstName = "Emily",
                            PatientLastName = "Chen",
                            PatientMinor = true,
                            PatientPhone = "425-555-0112",
                            PatientSSN = "123-45-6800",
                            PatientState = "WA",
                            PatientStreetAddress = "234 Birch Rd",
                            PatientZip = "98029"
                        },
                        new
                        {
                            PatientID = 13,
                            PatientCity = "Sammamish",
                            PatientDOB = new DateTime(1983, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "william.lee@gmail.com",
                            PatientFirstName = "William",
                            PatientHOHID = -1,
                            PatientLastName = "Lee",
                            PatientMinor = false,
                            PatientPhone = "425-555-0113",
                            PatientSSN = "123-45-6801",
                            PatientState = "WA",
                            PatientStreetAddress = "345 Spruce Way",
                            PatientZip = "98074"
                        },
                        new
                        {
                            PatientID = 14,
                            PatientCity = "Sammamish",
                            PatientDOB = new DateTime(2014, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "sophie.lee@gmail.com",
                            PatientFirstName = "Sophie",
                            PatientHOHID = 13,
                            PatientLastName = "Lee",
                            PatientMinor = true,
                            PatientPhone = "425-555-0114",
                            PatientSSN = "123-45-6802",
                            PatientState = "WA",
                            PatientStreetAddress = "345 Spruce Way",
                            PatientZip = "98074"
                        },
                        new
                        {
                            PatientID = 15,
                            PatientCity = "Sammamish",
                            PatientDOB = new DateTime(2016, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientEmail = "oliver.lee@gmail.com",
                            PatientFirstName = "Oliver",
                            PatientHOHID = 13,
                            PatientLastName = "Lee",
                            PatientMinor = true,
                            PatientPhone = "425-555-0115",
                            PatientSSN = "123-45-6803",
                            PatientState = "WA",
                            PatientStreetAddress = "345 Spruce Way",
                            PatientZip = "98074"
                        });
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"), 1L, 1);

                    b.Property<decimal?>("ServiceCost")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            ServiceCost = 75.00m,
                            ServiceDescription = "Basic Cleaning"
                        },
                        new
                        {
                            ServiceID = 2,
                            ServiceCost = 125.00m,
                            ServiceDescription = "X-Ray"
                        },
                        new
                        {
                            ServiceID = 3,
                            ServiceCost = 200.00m,
                            ServiceDescription = "Cavity Filling"
                        },
                        new
                        {
                            ServiceID = 4,
                            ServiceCost = 800.00m,
                            ServiceDescription = "Root Canal"
                        },
                        new
                        {
                            ServiceID = 5,
                            ServiceCost = 350.00m,
                            ServiceDescription = "Teeth Whitening"
                        },
                        new
                        {
                            ServiceID = 6,
                            ServiceCost = 1200.00m,
                            ServiceDescription = "Dental Crown"
                        },
                        new
                        {
                            ServiceID = 7,
                            ServiceCost = 2500.00m,
                            ServiceDescription = "Dental Bridge"
                        },
                        new
                        {
                            ServiceID = 8,
                            ServiceCost = 150.00m,
                            ServiceDescription = "Tooth Extraction"
                        },
                        new
                        {
                            ServiceID = 9,
                            ServiceCost = 200.00m,
                            ServiceDescription = "Deep Cleaning"
                        },
                        new
                        {
                            ServiceID = 10,
                            ServiceCost = 35.00m,
                            ServiceDescription = "Fluoride Treatment"
                        },
                        new
                        {
                            ServiceID = 11,
                            ServiceCost = 45.00m,
                            ServiceDescription = "Dental Sealants"
                        },
                        new
                        {
                            ServiceID = 12,
                            ServiceCost = 3000.00m,
                            ServiceDescription = "Dental Implant"
                        },
                        new
                        {
                            ServiceID = 13,
                            ServiceCost = 450.00m,
                            ServiceDescription = "Wisdom Tooth Removal"
                        },
                        new
                        {
                            ServiceID = 14,
                            ServiceCost = 50.00m,
                            ServiceDescription = "Dental Consultation"
                        },
                        new
                        {
                            ServiceID = 15,
                            ServiceCost = 250.00m,
                            ServiceDescription = "Emergency Dental Care"
                        });
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Visit", b =>
                {
                    b.Property<int>("VisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitID"), 1L, 1);

                    b.Property<int>("DentistID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisitDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("VisitID");

                    b.HasIndex("DentistID");

                    b.HasIndex("PatientID");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitID = 1,
                            DentistID = 1,
                            PatientID = 1,
                            VisitDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 2,
                            DentistID = 2,
                            PatientID = 2,
                            VisitDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 3,
                            DentistID = 3,
                            PatientID = 3,
                            VisitDate = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 4,
                            DentistID = 1,
                            PatientID = 4,
                            VisitDate = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 5,
                            DentistID = 2,
                            PatientID = 5,
                            VisitDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 6,
                            DentistID = 4,
                            PatientID = 6,
                            VisitDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 7,
                            DentistID = 5,
                            PatientID = 7,
                            VisitDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 8,
                            DentistID = 3,
                            PatientID = 8,
                            VisitDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 9,
                            DentistID = 4,
                            PatientID = 9,
                            VisitDate = new DateTime(2024, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 10,
                            DentistID = 5,
                            PatientID = 10,
                            VisitDate = new DateTime(2024, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Appointment", b =>
                {
                    b.HasOne("DTCDentalProjectPhase1.Models.Dentist", "Dentist")
                        .WithMany()
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DTCDentalProjectPhase1.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTCDentalProjectPhase1.Models.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.CompletedService", b =>
                {
                    b.HasOne("DTCDentalProjectPhase1.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTCDentalProjectPhase1.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Patient", b =>
                {
                    b.HasOne("DTCDentalProjectPhase1.Models.Patient", "PatientHOH")
                        .WithMany("Dependents")
                        .HasForeignKey("PatientHOHID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PatientHOH");
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Visit", b =>
                {
                    b.HasOne("DTCDentalProjectPhase1.Models.Dentist", "Dentist")
                        .WithMany()
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DTCDentalProjectPhase1.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DTCDentalProjectPhase1.Models.Patient", b =>
                {
                    b.Navigation("Dependents");
                });
#pragma warning restore 612, 618
        }
    }
}
